//父级合约拥有构造函数，并且要填入参数，该如何继承之后写入参数

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract S {
    string public name;

    constructor(string memory _name) {
        name = _name;
    }
}

contract T {
    string public text;

    constructor(string memory _text){
        text = _text;
    }
}

contract U is S("s"),T("t") {

}

contract V is S,T{
    constructor(string memory _name,string memory _text) S(_name) T(_text) {

    }
}

contract VV is S("s") , T {
    constructor(string memory _text) T(_text) {

    }
}

contract V0 is S,T {
    constructor(string memory _name,string memory _text) S(_text) T(_name) {

    }
}

//按照继承顺序构造函数进行运行

contract V1 is S,T {
    constructor(string memory _name,string memory _text) T(_text) S(_name) {}

}

contract V2 is T,S {
    constructor(string memory _name,string memory _text) T(_text) S(_name) {}
}
 
 contract V3 is T,S {
    constructor(string memory _name,string memory _text) S(_name) T(_text) { }
 }
